// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TapTapRelationLiteSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Foundation
import Kingfisher
import Network
import Swift
import TapTapBasicToolsSDK
import TapTapCoreSDK
import TapTapLoginSDK
import TapTapNetworkSDK
import TapTapProfileSDK
import TapTapSDKBridgeCore
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct TapRelationUITheme {
  public static let standard: TapTapRelationLiteSDK.TapRelationUITheme
  public static let standardPortrait: TapTapRelationLiteSDK.TapRelationUITheme
  public static let standardDark: TapTapRelationLiteSDK.TapRelationUITheme
  public static let standardPortraitDark: TapTapRelationLiteSDK.TapRelationUITheme
  public static let ipad: TapTapRelationLiteSDK.TapRelationUITheme
  public static let ipadDark: TapTapRelationLiteSDK.TapRelationUITheme
  public static let ipadPortrait: TapTapRelationLiteSDK.TapRelationUITheme
  public static let ipadPortraitDark: TapTapRelationLiteSDK.TapRelationUITheme
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TapRelationLiteSwiftBridgeService : ObjectiveC.NSObject {
  @objc public static let shared: TapTapRelationLiteSDK.TapRelationLiteSwiftBridgeService
  @objc public func inviteGameByRelationLite()
  @objc public func inviteTeam(teamId: Swift.String)
  @objc public func getFriendsList(nextPageToken: Swift.String?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func getFriendsList(nextPageToken: Swift.String?, callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func getFollowingList(nextPageToken: Swift.String?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func getFollowingList(nextPageToken: Swift.String?, callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func getFansList(nextPageToken: Swift.String?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func getFansList(nextPageToken: Swift.String?, callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func syncRelationshipWithOpenId(action: Swift.Int, nickname: Swift.String?, friendNickname: Swift.String?, friendOpenId: Swift.String?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func syncRelationshipWithOpenId(action: Swift.Int, nickname: Swift.String?, friendNickname: Swift.String?, friendOpenId: Swift.String?, callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func syncRelationshipWithUnionId(action: Swift.Int, nickname: Swift.String?, friendNickname: Swift.String?, friendUnionId: Swift.String?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func syncRelationshipWithUnionId(action: Swift.Int, nickname: Swift.String?, friendNickname: Swift.String?, friendUnionId: Swift.String?, callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func showTapUserProfile(openId: Swift.String?, unionId: Swift.String?)
  @objc public func registerRelationLiteCallback(completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerRelationLiteCallback(callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func unregisterRelationLiteCallback()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(TapRelationLiteSwiftBridgeInitializer) public class TapRelationLiteSwiftBridgeInitializer : ObjectiveC.NSObject {
  @objc public static func registerWithSwiftBridge()
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TapTapRelationRequestDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func onFriendsListResult(friendsList: [TapTapRelationLiteSDK.RelationLiteUserItem], nextPageToken: Swift.String?)
  @objc optional func onFollowingListResult(followingList: [TapTapRelationLiteSDK.RelationLiteUserItem], nextPageToken: Swift.String?)
  @objc optional func onFansListResult(fansList: [TapTapRelationLiteSDK.RelationLiteUserItem], nextPageToken: Swift.String?)
  @objc optional func onSyncRelationshipSuccess(openId: Swift.String?, unionId: Swift.String?)
  @objc optional func onSyncRelationshipFail(errorMessage: Swift.String?, openId: Swift.String?, unionId: Swift.String?)
  @objc optional func onRequestError(errorMessage: Swift.String?)
}
@objcMembers @objc(RelationLiteUserResult) public class RelationLiteUserResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var list: [TapTapRelationLiteSDK.RelationLiteUserItem]?
  @objc public var nextPageToken: Swift.String?
  @objc public init(list: [TapTapRelationLiteSDK.RelationLiteUserItem]?, nextPageToken: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objcMembers @objc(RelationLiteUserItem) public class RelationLiteUserItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var followStatus: TapTapRelationLiteSDK.FollowStatus
  @objc public var createdAt: Swift.Int64
  @objc public var user: TapTapRelationLiteSDK.RelationLiteUserInfo
  @objc public init(followStatus: TapTapRelationLiteSDK.FollowStatus = FollowStatus(), createdAt: Swift.Int64 = 0, user: TapTapRelationLiteSDK.RelationLiteUserInfo = RelationLiteUserInfo())
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func getJSONString() -> Swift.String?
  @objc deinit
}
@objcMembers @objc(RelationLiteUserInfo) public class RelationLiteUserInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var alias: Swift.String
  @objc public var avatar: Swift.String
  @objc public var name: Swift.String
  @objc public var openId: Swift.String
  @objc public init(alias: Swift.String = "", avatar: Swift.String = "", name: Swift.String = "", openId: Swift.String = "")
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objcMembers @objc(FollowStatus) public class FollowStatus : ObjectiveC.NSObject, Swift.Codable {
  @objc public var blockedBy: Swift.Bool
  @objc public var blocking: Swift.Bool
  @objc public var followedBy: Swift.Bool
  @objc public var following: Swift.Bool
  @objc public init(blockedBy: Swift.Bool = false, blocking: Swift.Bool = false, followedBy: Swift.Bool = false, following: Swift.Bool = false)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public protocol TapTapRelationLiteDelegate : ObjectiveC.NSObjectProtocol {
  @objc func onRelationLiteResult(code: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TapTapRelationLiteCode : ObjectiveC.NSObject {
  @objc public static let NEED_LOGIN: Swift.Int
  @objc public static let NEED_USER_FRIENDS_SCOPE: Swift.Int
  @objc public static let REQUEST_ERROR: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TapTapRelationLiteSyncType : ObjectiveC.NSObject {
  @objc public static let ADD_FRIEND: Swift.Int
  @objc public static let DELETE_FRIEND: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class TapTapRelationLite : ObjectiveC.NSObject {
  @objc public static func showTapUserProfile(openId: Swift.String? = nil, unionId: Swift.String? = nil)
  @objc public static func inviteGame()
  @objc public static func inviteTeam(teamId: Swift.String)
  @objc public static func getFriendsList(nextPageToken: Swift.String? = nil, completion: ((_ userList: TapTapRelationLiteSDK.RelationLiteUserResult?, _ error: Foundation.NSError?) -> Swift.Void)?)
  @objc public static func getFollowingList(nextPageToken: Swift.String? = nil, completion: ((_ userList: TapTapRelationLiteSDK.RelationLiteUserResult?, _ error: Foundation.NSError?) -> Swift.Void)?)
  @objc public static func getFansList(nextPageToken: Swift.String? = nil, completion: ((_ userList: TapTapRelationLiteSDK.RelationLiteUserResult?, _ error: Foundation.NSError?) -> Swift.Void)?)
  @objc public static func syncRelationshipWithOpenId(action: Swift.Int, nickname: Swift.String, friendNickname: Swift.String, friendOpenId: Swift.String, completion: ((_ error: Foundation.NSError?) -> Swift.Void)?)
  @objc public static func syncRelationshipWithUnionId(action: Swift.Int, nickname: Swift.String, friendNickname: Swift.String, friendUnionId: Swift.String, completion: ((_ error: Foundation.NSError?) -> Swift.Void)?)
  @objc public static func registerRelationLiteDelegate(delegate: any TapTapRelationLiteSDK.TapTapRelationLiteDelegate)
  @objc public static func unregisterRelationLiteDelegate(delegate: any TapTapRelationLiteSDK.TapTapRelationLiteDelegate)
  @objc override dynamic public init()
  @objc deinit
}

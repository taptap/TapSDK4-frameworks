// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TapTapComplianceSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import Foundation
import ObjectiveC
import Swift
import SystemConfiguration
import TapTapBasicToolsSDK
@_exported import TapTapComplianceSDK
import TapTapLoginSDK
import TapTapNetworkSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class User {
  @objc deinit
}
public class SwiftTimer {
  public var isRunning: Swift.Bool
  final public let repeats: Swift.Bool
  public typealias SwiftTimerHandler = (TapTapComplianceSDK.SwiftTimer) -> Swift.Void
  public init(interval: Dispatch.DispatchTimeInterval, repeats: Swift.Bool = false, leeway: Dispatch.DispatchTimeInterval = .seconds(0), queue: Dispatch.DispatchQueue = .main, handler: @escaping TapTapComplianceSDK.SwiftTimer.SwiftTimerHandler)
  public static func repeaticTimer(interval: Dispatch.DispatchTimeInterval, leeway: Dispatch.DispatchTimeInterval = .seconds(0), queue: Dispatch.DispatchQueue = .main, handler: @escaping TapTapComplianceSDK.SwiftTimer.SwiftTimerHandler) -> TapTapComplianceSDK.SwiftTimer
  @objc deinit
  public func fire()
  public func start(fireOnceWhenStart: Swift.Bool = false)
  public func cancel()
  public func rescheduleRepeating(interval: Dispatch.DispatchTimeInterval)
  public func rescheduleHandler(handler: @escaping TapTapComplianceSDK.SwiftTimer.SwiftTimerHandler)
}
extension TapTapComplianceSDK.SwiftTimer {
  public static func debounce(interval: Dispatch.DispatchTimeInterval, identifier: Swift.String, queue: Dispatch.DispatchQueue = .main, handler: @escaping () -> Swift.Void)
  public static func throttle(interval: Dispatch.DispatchTimeInterval, identifier: Swift.String, queue: Dispatch.DispatchQueue = .main, handler: @escaping () -> Swift.Void)
  public static func cancelThrottlingTimer(identifier: Swift.String)
}
public class SwiftCountDownTimer {
  final public let originalTimes: Swift.Int
  public init(interval: Dispatch.DispatchTimeInterval, times: Swift.Int, queue: Dispatch.DispatchQueue = .main, handler: @escaping (TapTapComplianceSDK.SwiftCountDownTimer, _ costTimes: Swift.Int, _ leftTimes: Swift.Int) -> Swift.Void)
  public func start()
  public func cancel()
  public func reCountDown()
  @objc deinit
}
extension Dispatch.DispatchTimeInterval {
  public static func fromSeconds(_ seconds: Swift.Double) -> Dispatch.DispatchTimeInterval
}
extension Swift.Collection {
  public subscript(safe index: Self.Index) -> Self.Iterator.Element? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class AntiAddictionConfiguration : ObjectiveC.NSObject {
  @objc final public var enableLog: Swift.Bool
  @objc final public var manual_auth_enable: Swift.Bool
  @objc final public var isServerError: Swift.Bool
  @objc final public var gameIdentifier: Swift.String?
  @objc final public let bundleId: Swift.String
  @objc final public var showSwitchAccount: Swift.Bool
  @objc final public var useAgeRange: Swift.Bool
  @objc final public var heartbeatInterval: Swift.Int
  @objc final public var playTimeStart: Swift.String
  @objc final public var playTimeEnd: Swift.String
  @objc final public var policyMode: Swift.String
  @objc final public var policyActive: Swift.String
  @objc final public var tap_auth_tip: TapTapComplianceSDK.AntiAuthIdentifyTip?
  @objc final public var manual_auth_tip: TapTapComplianceSDK.AntiAuthIdentifyTip?
  @objc final public var auth_waiting_tip: TapTapComplianceSDK.AntiAuthIdentifyTip?
  @objc final public var auth_failed_tip: TapTapComplianceSDK.AntiAuthIdentifyTip?
  @objc final public var allow_enter_tip: TapTapComplianceSDK.AntiAuthIdentifyTip?
  @objc final public var reject_enter_tip: TapTapComplianceSDK.AntiAuthIdentifyTip?
  @objc final public var holiday: [Swift.String]
  @objc deinit
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension TapTapComplianceSDK.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: TapTapComplianceSDK.JSON) throws
  public func merged(with other: TapTapComplianceSDK.JSON) throws -> TapTapComplianceSDK.JSON
  public var type: TapTapComplianceSDK.`Type` {
    get
  }
  public var error: TapTapComplianceSDK.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: TapTapComplianceSDK.JSON {
    get
  }
  public static var null: TapTapComplianceSDK.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: TapTapComplianceSDK.Index<T>, rhs: TapTapComplianceSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: TapTapComplianceSDK.Index<T>, rhs: TapTapComplianceSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = TapTapComplianceSDK.Index<TapTapComplianceSDK.JSON>
public typealias JSONRawIndex = TapTapComplianceSDK.Index<Any>
extension TapTapComplianceSDK.JSON : Swift.Collection {
  public typealias Index = TapTapComplianceSDK.JSONRawIndex
  public var startIndex: TapTapComplianceSDK.JSON.Index {
    get
  }
  public var endIndex: TapTapComplianceSDK.JSON.Index {
    get
  }
  public func index(after i: TapTapComplianceSDK.JSON.Index) -> TapTapComplianceSDK.JSON.Index
  public subscript(position: TapTapComplianceSDK.JSON.Index) -> (Swift.String, TapTapComplianceSDK.JSON) {
    get
  }
  public typealias Element = (Swift.String, TapTapComplianceSDK.JSON)
  public typealias Indices = Swift.DefaultIndices<TapTapComplianceSDK.JSON>
  public typealias Iterator = Swift.IndexingIterator<TapTapComplianceSDK.JSON>
  public typealias SubSequence = Swift.Slice<TapTapComplianceSDK.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: TapTapComplianceSDK.JSONKey { get }
}
extension Swift.Int : TapTapComplianceSDK.JSONSubscriptType {
  public var jsonKey: TapTapComplianceSDK.JSONKey {
    get
  }
}
extension Swift.String : TapTapComplianceSDK.JSONSubscriptType {
  public var jsonKey: TapTapComplianceSDK.JSONKey {
    get
  }
}
extension TapTapComplianceSDK.JSON {
  public subscript(path: [any TapTapComplianceSDK.JSONSubscriptType]) -> TapTapComplianceSDK.JSON {
    get
    set
  }
  public subscript(path: any TapTapComplianceSDK.JSONSubscriptType...) -> TapTapComplianceSDK.JSON {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension TapTapComplianceSDK.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension TapTapComplianceSDK.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension TapTapComplianceSDK.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension TapTapComplianceSDK.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension TapTapComplianceSDK.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension TapTapComplianceSDK.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [TapTapComplianceSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension TapTapComplianceSDK.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension TapTapComplianceSDK.JSON {
  public var array: [TapTapComplianceSDK.JSON]? {
    get
  }
  public var arrayValue: [TapTapComplianceSDK.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON {
  public var dictionary: [Swift.String : TapTapComplianceSDK.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : TapTapComplianceSDK.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension TapTapComplianceSDK.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension TapTapComplianceSDK.JSON : Swift.Comparable {
}
public func == (lhs: TapTapComplianceSDK.JSON, rhs: TapTapComplianceSDK.JSON) -> Swift.Bool
public func <= (lhs: TapTapComplianceSDK.JSON, rhs: TapTapComplianceSDK.JSON) -> Swift.Bool
public func >= (lhs: TapTapComplianceSDK.JSON, rhs: TapTapComplianceSDK.JSON) -> Swift.Bool
public func > (lhs: TapTapComplianceSDK.JSON, rhs: TapTapComplianceSDK.JSON) -> Swift.Bool
public func < (lhs: TapTapComplianceSDK.JSON, rhs: TapTapComplianceSDK.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: TapTapComplianceSDK.writingOptionsKeys, b: TapTapComplianceSDK.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TapTapComplianceSDK.JSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class DefaultsKey {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Key<ValueType> : TapTapComplianceSDK.DefaultsKey where ValueType : Swift.Decodable, ValueType : Swift.Encodable {
  public init(_ key: Swift.String)
  @objc deinit
}
final public class Defaults {
  public static let shared: TapTapComplianceSDK.Defaults
  public init(userDefaults: Foundation.UserDefaults = UserDefaults.standard)
  final public func clear<ValueType>(_ key: TapTapComplianceSDK.Key<ValueType>) where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func has<ValueType>(_ key: TapTapComplianceSDK.Key<ValueType>) -> Swift.Bool where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func get<ValueType>(for key: TapTapComplianceSDK.Key<ValueType>) -> ValueType? where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func set<ValueType>(_ value: ValueType, for key: TapTapComplianceSDK.Key<ValueType>) where ValueType : Swift.Decodable, ValueType : Swift.Encodable
  final public func removeAll(bundle: Foundation.Bundle = Bundle.main)
  @objc deinit
}
extension TapTapComplianceSDK.Defaults {
  final public func get<ValueType>(for key: TapTapComplianceSDK.Key<ValueType>) -> ValueType? where ValueType : Swift.Decodable, ValueType : Swift.Encodable, ValueType : Swift.RawRepresentable, ValueType.RawValue : Swift.Decodable, ValueType.RawValue : Swift.Encodable
  final public func set<ValueType>(_ value: ValueType, for key: TapTapComplianceSDK.Key<ValueType>) where ValueType : Swift.Decodable, ValueType : Swift.Encodable, ValueType : Swift.RawRepresentable, ValueType.RawValue : Swift.Decodable, ValueType.RawValue : Swift.Encodable
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ComplianceLogger : ObjectiveC.NSObject {
  @objc public static func debug(_ method: Swift.String, _ result: Swift.String)
  @objc public static func info(_ method: Swift.String, _ result: Swift.String)
  @objc public static func error(_ method: Swift.String, _ result: Swift.String)
  @objc public static func debug(_ log: Swift.String)
  @objc public static func info(_ log: Swift.String)
  public static func info(_ items: Any...)
  public static func debug(_ items: Any...)
  @objc override dynamic public init()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (TapTapComplianceSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (TapTapComplianceSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: TapTapComplianceSDK.Reachability.NetworkStatus, b: TapTapComplianceSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: TapTapComplianceSDK.Reachability.Connection, b: TapTapComplianceSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: TapTapComplianceSDK.Reachability.NetworkReachable?
  public var whenUnreachable: TapTapComplianceSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: TapTapComplianceSDK.Reachability.Connection {
    get
  }
  public var connection: TapTapComplianceSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension TapTapComplianceSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class AntiHttpUtil {
  @objc deinit
}
@objc public enum TapComplianceServiceResult : Swift.Int {
  case loginSuccess = 500
  case logout = 1000
  case switchAccount = 1001
  case periodRestrict = 1030
  case openAlertTip = 1095
  case payLimitNone = 1020
  case payLimitReachLimit = 1025
  case ageStrict = 1100
  case invalidClientOrNetworkError = 1200
  case realNameStop = 9002
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TapComplianceRealNameAuthState : Swift.Int, Swift.Codable {
  case success = 0
  case verifying = 1
  case fail = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TapComplianceRealNameAgeLimit : Swift.Int, Swift.Codable {
  case unrealname = -1
  case child = 0
  case teen = 8
  case young = 16
  case adult = 18
  case UNKNOWN_AGE = 100
  case UNKNOWN_AGE_ADULT = 110
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AntiAddictionTipType : Swift.Int, Swift.Codable {
  case taptap_quick_verify = 0
  case manual_auth_verify = 1
  case auth_waiting = 2
  case allow_enter = 10
  case reject_enter = 11
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TapComplianceServiceCallback : ObjectiveC.NSObjectProtocol {
  @objc func onCallback(code: Swift.Int, extra: Swift.String?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TapComplianceService) final public class TapComplianceService : ObjectiveC.NSObject {
  @objc public static var UseTestEnv: Swift.Bool
  @objc public static var configuration: TapTapComplianceSDK.AntiAddictionConfiguration
  @objc final public class func getSDKVersion() -> Swift.String
  @objc final public class func enableLog(enable: Swift.Bool)
  @objc final public class func setFunctionConfig(_ showSwitchAccount: Swift.Bool = true, _ useAgeRange: Swift.Bool = true)
  @objc final public class func getRealNameConfig(_ clientId: Swift.String, _ userId: Swift.String, completionHandler: ((_ suceess: Swift.Bool) -> Swift.Void)? = nil)
  @objc final public class func `init`(_ delegate: any TapTapComplianceSDK.TapComplianceServiceCallback, gameIdentifier: Swift.String? = nil)
  @objc final public class func getAlertTip(type: TapTapComplianceSDK.AntiAddictionTipType) -> TapTapComplianceSDK.AntiAuthIdentifyTip?
  @objc final public class func login(userId: Swift.String, accessToken: Swift.String)
  @objc final public class func enterGame()
  @objc final public class func leaveGame()
  @objc final public class func logout()
  @objc final public class func switchAccount()
  @objc final public class func getCurrentUserAgeLimite() -> Swift.Int
  @objc final public class func currentToken() -> Swift.String
  @objc final public class func currentUserRemainingTime() -> Swift.Int
  @objc final public class func checkPayLimit(_ amount: Swift.Int, callBack: ((_ status: Swift.Bool, _ title: Swift.String, _ description: Swift.String) -> Swift.Void)? = nil, failureHandler: ((_ message: Swift.String) -> Swift.Void)? = nil)
  @objc final public class func submitPayResult(_ amount: Swift.Int, _ callBack: ((_ success: Swift.Bool) -> Swift.Void)? = nil, _ failureHandler: ((_ message: Swift.String) -> Swift.Void)? = nil)
  @objc final public class func isHoliday() -> Swift.Bool
  @objc final public class func realNameAuth(clientId: Swift.String, userId: Swift.String, code: Swift.String, name: Swift.String, idCard: Swift.String, isFallBack: Swift.Bool, completion: @escaping (TapTapComplianceSDK.TapComplianceRealNameAuthState, Swift.String) -> (), failureHandler: @escaping (_ isInvalidUser: Swift.Bool, _ errorMessage: Swift.String) -> ())
  @objc final public class func performRealNameUseTapAuth(permission: Swift.String, callback: @escaping (TapTapLoginSDK.AccessToken?, Foundation.NSError?, Swift.Bool) -> ())
  @objc deinit
}
extension TapTapComplianceSDK.TapComplianceService {
  @objc final public class func checkRealNameState(clientId: Swift.String, userId: Swift.String, useAgeRange: Swift.Bool, completion: @escaping (_ identifyState: TapTapComplianceSDK.TapComplianceRealNameAuthState, _ antiAddictionToken: Swift.String, _ useTapToken: Swift.Bool) -> (), failureHandler: @escaping (_ errorMessage: Swift.String) -> ())
  @objc final public class func checkRealNameByTapToken(clientId: Swift.String, userId: Swift.String, useAgeRang: Swift.Bool, token: TapTapLoginSDK.AccessToken?, completion: @escaping (_ identifyState: TapTapComplianceSDK.TapComplianceRealNameAuthState, _ antiAddictionToken: Swift.String, _ useTapToken: Swift.Bool) -> (), failureHandler: @escaping (_ errorMessage: Swift.String) -> ())
  @objc final public class func hasComplianceAuthInLocal(token: TapTapLoginSDK.AccessToken?, useAgeRang: Swift.Bool) -> Swift.Bool
  @objc final public class func getCurrentSession() -> Swift.String
  @objc final public class func enterGamebyUI()
  @objc public static func registerEnvRouter()
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AntiAuthIdentifyTip : ObjectiveC.NSObject {
  @objc final public var tipTitle: Swift.String?
  @objc final public var tipDescription: Swift.String?
  @objc final public var positiveButton: Swift.String?
  @objc final public var negativeButton: Swift.String?
  @objc deinit
}
extension TapTapComplianceSDK.SwiftyJSONError : Swift.Equatable {}
extension TapTapComplianceSDK.SwiftyJSONError : Swift.Hashable {}
extension TapTapComplianceSDK.SwiftyJSONError : Swift.RawRepresentable {}
extension TapTapComplianceSDK.`Type` : Swift.Equatable {}
extension TapTapComplianceSDK.`Type` : Swift.Hashable {}
extension TapTapComplianceSDK.`Type` : Swift.RawRepresentable {}
extension TapTapComplianceSDK.writingOptionsKeys : Swift.Equatable {}
extension TapTapComplianceSDK.writingOptionsKeys : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension TapTapComplianceSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension TapTapComplianceSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension TapTapComplianceSDK.Reachability.Connection : Swift.Equatable {}
extension TapTapComplianceSDK.Reachability.Connection : Swift.Hashable {}
extension TapTapComplianceSDK.TapComplianceServiceResult : Swift.Equatable {}
extension TapTapComplianceSDK.TapComplianceServiceResult : Swift.Hashable {}
extension TapTapComplianceSDK.TapComplianceServiceResult : Swift.RawRepresentable {}
extension TapTapComplianceSDK.TapComplianceRealNameAuthState : Swift.Equatable {}
extension TapTapComplianceSDK.TapComplianceRealNameAuthState : Swift.Hashable {}
extension TapTapComplianceSDK.TapComplianceRealNameAuthState : Swift.RawRepresentable {}
extension TapTapComplianceSDK.TapComplianceRealNameAgeLimit : Swift.Equatable {}
extension TapTapComplianceSDK.TapComplianceRealNameAgeLimit : Swift.Hashable {}
extension TapTapComplianceSDK.TapComplianceRealNameAgeLimit : Swift.RawRepresentable {}
extension TapTapComplianceSDK.AntiAddictionTipType : Swift.Equatable {}
extension TapTapComplianceSDK.AntiAddictionTipType : Swift.Hashable {}
extension TapTapComplianceSDK.AntiAddictionTipType : Swift.RawRepresentable {}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TapTapLeaderboardSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Foundation
import Photos
import Swift
import TapTapBasicToolsSDK
import TapTapCoreSDK
import TapTapLoginSDK
import TapTapNetworkSDK
import TapTapProfileSDK
import TapTapSDKBridgeCore
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapWebViewJavascriptBridge : ObjectiveC.NSObject {
  @objc public func getWebView() -> WebKit.WKWebView
  @objc deinit
}
extension TapTapLeaderboardSDK.TapWebViewJavascriptBridge : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension TapTapLeaderboardSDK.TapWebViewJavascriptBridge : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> ())
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> ())
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> ())
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TapLeaderboardSwiftBridgeService : ObjectiveC.NSObject {
  @objc public static let shared: TapTapLeaderboardSDK.TapLeaderboardSwiftBridgeService
  @objc public func openLeaderboard(leaderboardId: Swift.String, leaderboardCollection: Swift.String?)
  @objc public func openUserProfile(openId: Swift.String?, unionId: Swift.String?)
  @objc public func submitScores(scores: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func loadLeaderboardScores(leaderboardId: Swift.String, leaderboardCollection: Swift.String?, nextPage: Swift.String?, periodToken: Swift.String?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func loadCurrentPlayerLeaderboardScore(leaderboardId: Swift.String, leaderboardCollection: Swift.String?, periodToken: Swift.String?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func loadCurrentPlayerLeaderboardScore(leaderboardId: Swift.String, leaderboardCollection: Swift.String?, periodToken: Swift.String?, callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func loadPlayerCenteredScores(leaderboardId: Swift.String, leaderboardCollection: Swift.String?, periodToken: Swift.String?, maxCount: Foundation.NSNumber?, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func loadPlayerCenteredScores(leaderboardId: Swift.String, leaderboardCollection: Swift.String?, periodToken: Swift.String?, maxCount: Foundation.NSNumber?, callbackId: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func setShareCallback(completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerLeaderboardCallback(completion: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(TapLeaderboardSwiftBridgeInitializer) public class TapLeaderboardSwiftBridgeInitializer : ObjectiveC.NSObject {
  @objc public static func registerWithSwiftBridge()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TapLeaderboardBizErrorConverter : ObjectiveC.NSObject {
  @objc public static func convert(error: any Swift.Error) -> TapTapLeaderboardSDK.TapLeaderboardError
  @objc public static func convert(error: any Swift.Error, defaultMessage: Swift.String) -> TapTapLeaderboardSDK.TapLeaderboardError
  @objc public static func convertFromResponse(responseData: [Swift.String : Any]?, statusCode: Swift.Int, errorMessage: Swift.String?) -> TapTapLeaderboardSDK.TapLeaderboardError
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum TapLeaderboardErrorCode : Swift.Int {
  case leaderboardPeriodExpired = 500000
  case leaderboardIdNotFound = 500001
  case leaderboardInvalidArguments = 500002
  case insufficientScopes = 500101
  case notLogin = 500102
  case unknown = 500199
  public static func fromServerCode(_ serverCode: Swift.Int) -> TapTapLeaderboardSDK.TapLeaderboardErrorCode
  public var clientCode: Swift.Int {
    get
  }
  public var serverCode: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class TapLeaderboardError : ObjectiveC.NSObject, Swift.Error {
  @objc final public let errorCode: TapTapLeaderboardSDK.TapLeaderboardErrorCode
  @objc final public let message: Swift.String
  @objc public init(errorCode: TapTapLeaderboardSDK.TapLeaderboardErrorCode, message: Swift.String)
  @objc public var clientCode: Swift.Int {
    @objc get
  }
  @objc public var serverCode: Swift.Int {
    @objc get
  }
  @objc public var localizedDescription: Swift.String {
    @objc get
  }
  @objc public static func create(code: TapTapLeaderboardSDK.TapLeaderboardErrorCode, message: Swift.String) -> TapTapLeaderboardSDK.TapLeaderboardError
  @objc public static func unknown(message: Swift.String = "未知错误") -> TapTapLeaderboardSDK.TapLeaderboardError
  @objc deinit
}
extension TapTapLeaderboardSDK.TapLeaderboardErrorCode {
  public static let SUCCESS: Swift.Int
  public static let LEADERBOARD_PERIOD_EXPIRED: Swift.Int
  public static let LEADERBOARD_ID_NOT_FOUND: Swift.Int
  public static let LEADERBOARD_INVALID_ARGUMENTS: Swift.Int
  public static let INSUFFICIENT_SCOPES: Swift.Int
  public static let NOT_LOGIN: Swift.Int
  public static let UNKNOWN: Swift.Int
  public static let NOT_LOGGED: Swift.Int
  public static let UNKNOWN_ERROR: Swift.Int
}
@objc public protocol TapTapLeaderboardResponseCallback : ObjectiveC.NSObjectProtocol {
  @objc func onSuccess(data: Any)
  @objc func onFailure(code: Swift.Int, message: Swift.String)
}
@objc public protocol TapTapLeaderboardCallback : ObjectiveC.NSObjectProtocol {
  @objc func onLeaderboardResult(code: Swift.Int, message: Swift.String)
}
@objc public protocol TapTapLeaderboardShareCallback : ObjectiveC.NSObjectProtocol {
  @objc func onShareSuccess(localPath: Swift.String)
  @objc func onShareFailed(error: any Swift.Error)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class TapTapLeaderboard : ObjectiveC.NSObject {
  @objc public static func openUserProfile(openId: Swift.String = "", unionId: Swift.String = "")
  @objc public static func openLeaderboard(leaderboardId: Swift.String, collection: TapTapLeaderboardSDK.TapTapLeaderboardCollection)
  @objc public static func submitScores(scores: [TapTapLeaderboardSDK.TapTapLeaderboardScoreItem], callback: any TapTapLeaderboardSDK.TapTapLeaderboardResponseCallback)
  @objc public static func loadLeaderboardScores(leaderboardId: Swift.String, collection: TapTapLeaderboardSDK.TapTapLeaderboardCollection, nextPage: Swift.String? = nil, periodToken: Swift.String? = nil, callback: any TapTapLeaderboardSDK.TapTapLeaderboardResponseCallback)
  @objc public static func loadCurrentPlayerLeaderboardScore(leaderboardId: Swift.String, collection: TapTapLeaderboardSDK.TapTapLeaderboardCollection, periodToken: Swift.String? = nil, callback: any TapTapLeaderboardSDK.TapTapLeaderboardResponseCallback)
  public static func loadPlayerCenteredScores(leaderboardId: Swift.String, collection: TapTapLeaderboardSDK.TapTapLeaderboardCollection, periodToken: Swift.String? = nil, maxCount: Swift.Int? = nil, callback: any TapTapLeaderboardSDK.TapTapLeaderboardResponseCallback)
  @objc public static func loadPlayerCenteredScoresObjC(leaderboardId: Swift.String, collection: TapTapLeaderboardSDK.TapTapLeaderboardCollection, periodToken: Swift.String?, maxCount: Foundation.NSNumber?, callback: any TapTapLeaderboardSDK.TapTapLeaderboardResponseCallback)
  @objc public static func registerLeaderboardCallback(callback: any TapTapLeaderboardSDK.TapTapLeaderboardCallback)
  @objc public static func unregisterLeaderboardCallback(callback: any TapTapLeaderboardSDK.TapTapLeaderboardCallback)
  @objc public static func getRegisteredLeaderboardCallbacks() -> [any TapTapLeaderboardSDK.TapTapLeaderboardCallback]
  @objc public static func setShareCallback(callback: any TapTapLeaderboardSDK.TapTapLeaderboardShareCallback)
  @objc public static func getShareCallback() -> (any TapTapLeaderboardSDK.TapTapLeaderboardShareCallback)?
  @objc public static func showLeaderboardFilter(sdkUserId: Swift.String, currentLeaderboardId: Swift.String, callback: ((Swift.String, Swift.String, Swift.Int) -> Swift.Void)?)
  @objc public static func showLeaderboardFilterWithRankDisplay(sdkUserId: Swift.String, currentLeaderboardId: Swift.String, callback: ((Swift.String, Swift.String, Swift.Int, Swift.String?) -> Swift.Void)?)
  @objc public static func convertError(_ error: any Swift.Error) -> TapTapLeaderboardSDK.TapLeaderboardError
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapLeaderboardCollection : ObjectiveC.NSObject {
  @objc public static let friends: TapTapLeaderboardSDK.TapTapLeaderboardCollection
  @objc public static let `public`: TapTapLeaderboardSDK.TapTapLeaderboardCollection
  @objc final public let rawValue: Swift.String
  @objc public static func from(_ value: Swift.String) -> TapTapLeaderboardSDK.TapTapLeaderboardCollection
  @objc deinit
}
@objc @objcMembers public class TapTapLeaderboardScoreItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var leaderboardId: Swift.String
  @objc public var score: Swift.Int64
  @objc public init(leaderboardId: Swift.String, score: Swift.Int64)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TapTapLeaderboardImage : ObjectiveC.NSObject, Swift.Codable {
  @objc public var color: Swift.String
  @objc public var gifUrl: Swift.String?
  public var height: Swift.Int?
  public var width: Swift.Int?
  @objc public var mediumUrl: Swift.String
  @objc public var originalFormat: Swift.String
  public var originalSize: Swift.Int?
  @objc public var originalUrl: Swift.String
  @objc public var smallUrl: Swift.String
  @objc public var url: Swift.String
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapLeaderboardUser : ObjectiveC.NSObject, Swift.Codable {
  @objc public var avatar: TapTapLeaderboardSDK.TapTapLeaderboardImage?
  @objc public var name: Swift.String?
  @objc public var openId: Swift.String?
  @objc public var unionId: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapLeaderboardScore : ObjectiveC.NSObject, Swift.Codable {
  public var rank: Swift.Int64?
  @objc public var rankDisplay: Swift.String?
  public var score: Swift.Int64?
  @objc public var scoreDisplay: Swift.String?
  public var scoreSubmittedTime: Swift.Int64?
  @objc public var user: TapTapLeaderboardSDK.TapTapLeaderboardUser?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapLeaderboardPeriod : ObjectiveC.NSObject, Swift.Codable {
  @objc public var display: Swift.String?
  @objc public var periodToken: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapLeaderboardInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var availablePeriods: [TapTapLeaderboardSDK.TapTapLeaderboardPeriod]
  @objc public var background: TapTapLeaderboardSDK.TapTapLeaderboardImage?
  @objc public var id: Swift.String
  @objc public var name: Swift.String
  @objc public var period: TapTapLeaderboardSDK.TapTapLeaderboardPeriod?
  @objc public var score: TapTapLeaderboardSDK.TapTapLeaderboardScore?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapSubmitScoreResponseItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var leaderboardId: Swift.String
  @objc public var openId: Swift.String
  @objc public var periodToken: Swift.String
  @objc public var scoreResult: TapTapLeaderboardSDK.TapTapSubmitScoreResult?
  @objc public var unionId: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapSubmitScoreResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var newBest: Swift.Bool
  @objc public var rawScore: Swift.Int64
  @objc public var scoreDisplay: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapSubmitScoresResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var items: [TapTapLeaderboardSDK.TapTapSubmitScoreResponseItem]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapLeaderboardScoresResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var leaderboard: TapTapLeaderboardSDK.TapTapLeaderboardInfo?
  @objc public var scores: [TapTapLeaderboardSDK.TapTapLeaderboardScore]?
  @objc public var nextContinuationToken: Swift.String?
  @objc public var isTruncated: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapUserScoreResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var currentUserScore: TapTapLeaderboardSDK.TapTapLeaderboardScore?
  @objc public var leaderboard: TapTapLeaderboardSDK.TapTapLeaderboardInfo?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class TapTapLeaderboardDataResponse : ObjectiveC.NSObject {
  @objc public var leaderboard: TapTapLeaderboardSDK.TapTapLeaderboardInfo?
  @objc public var scores: [TapTapLeaderboardSDK.TapTapLeaderboardScore]?
  @objc public var nextPage: Swift.String
  @objc public init(leaderboard: TapTapLeaderboardSDK.TapTapLeaderboardInfo? = nil, scores: [TapTapLeaderboardSDK.TapTapLeaderboardScore]? = nil, nextPage: Swift.String = "")
  @objc public static func from(internalResponse: TapTapLeaderboardSDK.TapTapLeaderboardScoresResponse) -> TapTapLeaderboardSDK.TapTapLeaderboardDataResponse
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TapTapLeaderboardGroupResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var groups: [TapTapLeaderboardSDK.TapTapLeaderboardGroupResponse.Group]
  @objc @_inheritsConvenienceInitializers @objcMembers public class Group : ObjectiveC.NSObject, Swift.Codable {
    @objc public var leaderboards: [TapTapLeaderboardSDK.TapTapLeaderboardInfo]
    @objc public var name: Swift.String
    @objc override dynamic public init()
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class TapLeaderboardFilterGroup : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc public var isSelected: Swift.Bool
  @objc public var leaderboards: [TapTapLeaderboardSDK.TapLeaderboardFilterItem]
  @objc public init(id: Swift.String, name: Swift.String, isSelected: Swift.Bool = false, leaderboards: [TapTapLeaderboardSDK.TapLeaderboardFilterItem] = [])
  @objc deinit
}
@objc @objcMembers public class TapLeaderboardFilterItem : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc final public let rank: Swift.Int
  @objc final public let rankDisplay: Swift.String?
  @objc public var isSelected: Swift.Bool
  @objc public init(id: Swift.String, name: Swift.String, rank: Swift.Int = 0, rankDisplay: Swift.String? = nil, isSelected: Swift.Bool = false)
  @objc deinit
}
@objc public protocol TapLeaderboardFilterCallback : ObjectiveC.NSObjectProtocol {
  @objc func onLeaderboardChange(leaderboardId: Swift.String, leaderboardName: Swift.String, rank: Swift.Int, rankDisplay: Swift.String?)
}
extension TapTapLeaderboardSDK.TapLeaderboardErrorCode : Swift.Equatable {}
extension TapTapLeaderboardSDK.TapLeaderboardErrorCode : Swift.Hashable {}
extension TapTapLeaderboardSDK.TapLeaderboardErrorCode : Swift.RawRepresentable {}

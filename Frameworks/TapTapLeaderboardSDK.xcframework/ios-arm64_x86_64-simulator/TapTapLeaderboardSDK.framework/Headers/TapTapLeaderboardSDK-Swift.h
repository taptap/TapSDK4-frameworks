#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef TAPTAPLEADERBOARDSDK_SWIFT_H
#define TAPTAPLEADERBOARDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TapTapLeaderboardSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class TapLeaderboardError;
@class NSString;
/// 业务错误转换器，对齐 Android BizErrorConverter.kt
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK31TapLeaderboardBizErrorConverter")
@interface TapLeaderboardBizErrorConverter : NSObject
/// 将业务错误转换为 TapLeaderboardError
/// 参照 Android 的 convert 方法实现
/// \param error 原始错误
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertWithError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// 将业务错误转换为 TapLeaderboardError，带默认消息
/// \param error 原始错误
///
/// \param defaultMessage 默认错误消息
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertWithError:(NSError * _Nonnull)error defaultMessage:(NSString * _Nonnull)defaultMessage SWIFT_WARN_UNUSED_RESULT;
/// 从网络响应数据转换错误
/// \param responseData 响应数据字典
///
/// \param statusCode HTTP状态码
///
/// \param errorMessage 错误消息
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertFromResponseWithResponseData:(NSDictionary<NSString *, id> * _Nullable)responseData statusCode:(NSInteger)statusCode errorMessage:(NSString * _Nullable)errorMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TapLeaderboardErrorCode : NSInteger;
/// 排行榜错误模型，对齐 Android LeaderboardError.kt
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK19TapLeaderboardError")
@interface TapLeaderboardError : NSObject
/// 错误码
@property (nonatomic, readonly) enum TapLeaderboardErrorCode errorCode;
/// 错误信息
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// 初始化错误对象
/// \param errorCode 错误码
///
/// \param message 错误信息
///
- (nonnull instancetype)initWithErrorCode:(enum TapLeaderboardErrorCode)errorCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// 获取客户端错误码
///
/// returns:
/// 客户端错误码
@property (nonatomic, readonly) NSInteger clientCode;
/// 获取服务器错误码
///
/// returns:
/// 服务器错误码
@property (nonatomic, readonly) NSInteger serverCode;
/// Error 协议实现
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
/// 便利构造方法：从错误码和消息创建
/// \param code 错误码
///
/// \param message 错误消息
///
///
/// returns:
/// 错误对象
+ (TapLeaderboardError * _Nonnull)createWithCode:(enum TapLeaderboardErrorCode)code message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 便利构造方法：创建未知错误
/// \param message 错误消息
///
///
/// returns:
/// 未知错误对象
+ (TapLeaderboardError * _Nonnull)unknownWithMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 排行榜错误码枚举，对齐 Android ErrorCode.kt
typedef SWIFT_ENUM(NSInteger, TapLeaderboardErrorCode, open) {
/// 排行榜周期已过期
  TapLeaderboardErrorCodeLeaderboardPeriodExpired = 500000,
/// 排行榜 ID 未找到
  TapLeaderboardErrorCodeLeaderboardIdNotFound = 500001,
/// 排行榜参数错误
  TapLeaderboardErrorCodeLeaderboardInvalidArguments = 500002,
/// 当前用户未授权获取此产品（服务）
  TapLeaderboardErrorCodeInsufficientScopes = 500101,
/// 用户未登录
  TapLeaderboardErrorCodeNotLogin = 500102,
/// 未知错误
  TapLeaderboardErrorCodeUnknown = 500199,
};

/// 排行榜筛选回调协议
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK28TapLeaderboardFilterCallback_")
@protocol TapLeaderboardFilterCallback <NSObject>
/// 排行榜选择改变回调
/// \param leaderboardId 选中的排行榜ID
///
/// \param leaderboardName 选中的排行榜名称
///
/// \param rank 用户排名
///
/// \param rankDisplay 排名显示文本
///
- (void)onLeaderboardChangeWithLeaderboardId:(NSString * _Nonnull)leaderboardId leaderboardName:(NSString * _Nonnull)leaderboardName rank:(NSInteger)rank rankDisplay:(NSString * _Nullable)rankDisplay;
@end

@class TapLeaderboardFilterItem;
/// 排行榜筛选数据模型
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK25TapLeaderboardFilterGroup")
@interface TapLeaderboardFilterGroup : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic) BOOL isSelected;
@property (nonatomic, copy) NSArray<TapLeaderboardFilterItem *> * _Nonnull leaderboards;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name isSelected:(BOOL)isSelected leaderboards:(NSArray<TapLeaderboardFilterItem *> * _Nonnull)leaderboards OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK24TapLeaderboardFilterItem")
@interface TapLeaderboardFilterItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSInteger rank;
@property (nonatomic, readonly, copy) NSString * _Nullable rankDisplay;
@property (nonatomic) BOOL isSelected;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name rank:(NSInteger)rank rankDisplay:(NSString * _Nullable)rankDisplay isSelected:(BOOL)isSelected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TapTapLeaderboardCollection;
@class TapTapLeaderboardScoreItem;
@protocol TapTapLeaderboardResponseCallback;
@class NSNumber;
@protocol TapTapLeaderboardCallback;
@protocol TapTapLeaderboardShareCallback;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK17TapTapLeaderboard")
@interface TapTapLeaderboard : NSObject
/// 打开用户名片
/// \param openId 开放平台ID
///
/// \param unionId 统一ID
///
+ (void)openUserProfileWithOpenId:(NSString * _Nonnull)openId unionId:(NSString * _Nonnull)unionId;
/// 打开排行榜
/// \param leaderboardId 排行榜ID
///
/// \param collection 排行榜集合类型
///
+ (void)openLeaderboardWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection;
/// 批量提交用户排行榜分数（一次最多提交5个分数）
/// \param scores 分数列表，最多5个
///
/// \param callback 响应回调
///
+ (void)submitScoresWithScores:(NSArray<TapTapLeaderboardScoreItem *> * _Nonnull)scores callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
/// 获取排行榜数据
/// \param leaderboardId 排行榜ID
///
/// \param collection 排行榜集合类型
///
/// \param nextPage 下一页标识，可选
///
/// \param periodToken 周期令牌，可选
///
/// \param callback 响应回调
///
+ (void)loadLeaderboardScoresWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection nextPage:(NSString * _Nullable)nextPage periodToken:(NSString * _Nullable)periodToken callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
/// 单查用户排行榜数据
/// \param leaderboardId 排行榜ID
///
/// \param collection 排行榜集合类型
///
/// \param periodToken 周期令牌，可选
///
/// \param callback 响应回调
///
+ (void)loadCurrentPlayerLeaderboardScoreWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection periodToken:(NSString * _Nullable)periodToken callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
+ (void)loadPlayerCenteredScoresObjCWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection periodToken:(NSString * _Nullable)periodToken maxCount:(NSNumber * _Nullable)maxCount callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
/// 注册排行榜回调
/// \param callback 排行榜回调
///
+ (void)registerLeaderboardCallbackWithCallback:(id <TapTapLeaderboardCallback> _Nonnull)callback;
/// 取消注册排行榜回调
/// \param callback 排行榜回调
///
+ (void)unregisterLeaderboardCallbackWithCallback:(id <TapTapLeaderboardCallback> _Nonnull)callback;
/// 获取已注册的排行榜回调列表
///
/// returns:
/// 回调列表
+ (NSArray<id <TapTapLeaderboardCallback>> * _Nonnull)getRegisteredLeaderboardCallbacks SWIFT_WARN_UNUSED_RESULT;
/// 设置分享回调
/// \param callback 分享回调
///
+ (void)setShareCallbackWithCallback:(id <TapTapLeaderboardShareCallback> _Nonnull)callback;
/// 获取分享回调
///
/// returns:
/// 分享回调
+ (id <TapTapLeaderboardShareCallback> _Nullable)getShareCallback SWIFT_WARN_UNUSED_RESULT;
/// 显示排行榜筛选对话框
/// \param sdkUserId 用户 sdkUserId
///
/// \param currentLeaderboardId 当前选中的排行榜ID
///
/// \param callback 选择回调 (leaderboardId, leaderboardName, rank)
///
+ (void)showLeaderboardFilterWithSdkUserId:(NSString * _Nonnull)sdkUserId currentLeaderboardId:(NSString * _Nonnull)currentLeaderboardId callback:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull, NSInteger))callback;
/// 显示排行榜筛选对话框（扩展版本，包含rankDisplay）
/// \param sdkUserId 用户 sdkUserId
///
/// \param currentLeaderboardId 当前选中的排行榜ID
///
/// \param callback 选择回调 (leaderboardId, leaderboardName, rank, rankDisplay)
///
+ (void)showLeaderboardFilterWithRankDisplayWithSdkUserId:(NSString * _Nonnull)sdkUserId currentLeaderboardId:(NSString * _Nonnull)currentLeaderboardId callback:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull, NSInteger, NSString * _Nullable))callback;
/// 转换错误为排行榜错误（提供给外部使用）
/// \param error 原始错误
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 排行榜通用回调
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK25TapTapLeaderboardCallback_")
@protocol TapTapLeaderboardCallback <NSObject>
/// 排行榜结果回调
/// \param code 结果码
///
/// \param message 消息
///
- (void)onLeaderboardResultWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK27TapTapLeaderboardCollection")
@interface TapTapLeaderboardCollection : NSObject
/// 好友榜
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TapTapLeaderboardCollection * _Nonnull friends;)
+ (TapTapLeaderboardCollection * _Nonnull)friends SWIFT_WARN_UNUSED_RESULT;
/// 总榜
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=public) TapTapLeaderboardCollection * _Nonnull public_;)
+ (TapTapLeaderboardCollection * _Nonnull)public SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
+ (TapTapLeaderboardCollection * _Nonnull)from:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TapTapLeaderboardInfo;
@class TapTapLeaderboardScore;
@class TapTapLeaderboardScoresResponse;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK29TapTapLeaderboardDataResponse")
@interface TapTapLeaderboardDataResponse : NSObject
/// 排行榜信息
@property (nonatomic, strong) TapTapLeaderboardInfo * _Nullable leaderboard;
/// 分数列表
@property (nonatomic, copy) NSArray<TapTapLeaderboardScore *> * _Nullable scores;
/// 下一页标识（根据is_truncated决定取值）
@property (nonatomic, copy) NSString * _Nonnull nextPage;
- (nonnull instancetype)initWithLeaderboard:(TapTapLeaderboardInfo * _Nullable)leaderboard scores:(NSArray<TapTapLeaderboardScore *> * _Nullable)scores nextPage:(NSString * _Nonnull)nextPage OBJC_DESIGNATED_INITIALIZER;
/// 从内部response转换为对外response
/// \param internalResponse 内部使用的TapTapLeaderboardScoresResponse
///
///
/// returns:
/// 对外的TapTapLeaderboardDataResponse
+ (TapTapLeaderboardDataResponse * _Nonnull)fromInternalResponse:(TapTapLeaderboardScoresResponse * _Nonnull)internalResponse SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Group;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK30TapTapLeaderboardGroupResponse")
@interface TapTapLeaderboardGroupResponse : NSObject
@property (nonatomic, copy) NSArray<Group *> * _Nonnull groups;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK22TapTapLeaderboardImage")
@interface TapTapLeaderboardImage : NSObject
@property (nonatomic, copy) NSString * _Nonnull color;
@property (nonatomic, copy) NSString * _Nullable gifUrl;
@property (nonatomic, copy) NSString * _Nonnull mediumUrl;
@property (nonatomic, copy) NSString * _Nonnull originalFormat;
@property (nonatomic, copy) NSString * _Nonnull originalUrl;
@property (nonatomic, copy) NSString * _Nonnull smallUrl;
@property (nonatomic, copy) NSString * _Nonnull url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TapTapLeaderboardPeriod;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK21TapTapLeaderboardInfo")
@interface TapTapLeaderboardInfo : NSObject
/// 可用的时间周期
@property (nonatomic, copy) NSArray<TapTapLeaderboardPeriod *> * _Nonnull availablePeriods;
/// 排行榜背景图片（结构体）
@property (nonatomic, strong) TapTapLeaderboardImage * _Nullable background;
/// 排行榜ID
@property (nonatomic, copy) NSString * _Nonnull id;
/// 排行榜名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 当前周期
@property (nonatomic, strong) TapTapLeaderboardPeriod * _Nullable period;
/// 排行榜分数
@property (nonatomic, strong) TapTapLeaderboardScore * _Nullable score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK23TapTapLeaderboardPeriod")
@interface TapTapLeaderboardPeriod : NSObject
/// 展示文本
@property (nonatomic, copy) NSString * _Nullable display;
/// 周期标识
@property (nonatomic, copy) NSString * _Nullable periodToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 排行榜响应回调协议（泛型）
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK33TapTapLeaderboardResponseCallback_")
@protocol TapTapLeaderboardResponseCallback <NSObject>
/// 成功回调
/// \param data 响应数据
///
- (void)onSuccessWithData:(id _Nonnull)data;
/// 失败回调
/// \param code 错误码
///
/// \param message 错误信息
///
- (void)onFailureWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
@end

@class TapTapLeaderboardUser;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK22TapTapLeaderboardScore")
@interface TapTapLeaderboardScore : NSObject
/// 排名展示文本
@property (nonatomic, copy) NSString * _Nullable rankDisplay;
/// 分数展示文本
@property (nonatomic, copy) NSString * _Nullable scoreDisplay;
/// 用户信息
@property (nonatomic, strong) TapTapLeaderboardUser * _Nullable user;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK26TapTapLeaderboardScoreItem")
@interface TapTapLeaderboardScoreItem : NSObject
/// 排行榜ID
@property (nonatomic, copy) NSString * _Nonnull leaderboardId;
/// 分数值
@property (nonatomic) int64_t score;
- (nonnull instancetype)initWithLeaderboardId:(NSString * _Nonnull)leaderboardId score:(int64_t)score OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK31TapTapLeaderboardScoresResponse")
@interface TapTapLeaderboardScoresResponse : NSObject
/// 排行榜信息
@property (nonatomic, strong) TapTapLeaderboardInfo * _Nullable leaderboard;
/// 分数列表（可为空）
@property (nonatomic, copy) NSArray<TapTapLeaderboardScore *> * _Nullable scores;
/// 下一页续传标识
@property (nonatomic, copy) NSString * _Nullable nextContinuationToken;
/// 是否截断（是否还有更多）
@property (nonatomic) BOOL isTruncated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 分享回调协议
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK30TapTapLeaderboardShareCallback_")
@protocol TapTapLeaderboardShareCallback <NSObject>
/// 分享成功
/// \param localPath 本地文件路径
///
- (void)onShareSuccessWithLocalPath:(NSString * _Nonnull)localPath;
/// 分享失败
/// \param error 错误信息
///
- (void)onShareFailedWithError:(NSError * _Nonnull)error;
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK21TapTapLeaderboardUser")
@interface TapTapLeaderboardUser : NSObject
/// 用户头像（结构体）
@property (nonatomic, strong) TapTapLeaderboardImage * _Nullable avatar;
/// 用户名称
@property (nonatomic, copy) NSString * _Nullable name;
/// 开放平台ID
@property (nonatomic, copy) NSString * _Nullable openId;
/// 统一ID
@property (nonatomic, copy) NSString * _Nullable unionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TapTapSubmitScoreResult;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK29TapTapSubmitScoreResponseItem")
@interface TapTapSubmitScoreResponseItem : NSObject
/// 排行榜ID
@property (nonatomic, copy) NSString * _Nonnull leaderboardId;
/// 用户开放平台ID
@property (nonatomic, copy) NSString * _Nonnull openId;
/// 周期Token
@property (nonatomic, copy) NSString * _Nonnull periodToken;
/// 分数结果
@property (nonatomic, strong) TapTapSubmitScoreResult * _Nullable scoreResult;
/// 用户统一ID
@property (nonatomic, copy) NSString * _Nonnull unionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK23TapTapSubmitScoreResult")
@interface TapTapSubmitScoreResult : NSObject
/// 是否为新的最佳成绩
@property (nonatomic) BOOL newBest;
/// 原始分数
@property (nonatomic) int64_t rawScore;
/// 分数展示文本
@property (nonatomic, copy) NSString * _Nonnull scoreDisplay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK26TapTapSubmitScoresResponse")
@interface TapTapSubmitScoresResponse : NSObject
/// 提交结果列表
@property (nonatomic, copy) NSArray<TapTapSubmitScoreResponseItem *> * _Nonnull items;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK23TapTapUserScoreResponse")
@interface TapTapUserScoreResponse : NSObject
/// 当前用户的分数信息
@property (nonatomic, strong) TapTapLeaderboardScore * _Nullable currentUserScore;
/// 排行榜信息
@property (nonatomic, strong) TapTapLeaderboardInfo * _Nullable leaderboard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK26TapWebViewJavascriptBridge")
@interface TapWebViewJavascriptBridge : NSObject
- (WKWebView * _Nonnull)getWebView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKUserContentController;
@class WKScriptMessage;
@interface TapWebViewJavascriptBridge (SWIFT_EXTENSION(TapTapLeaderboardSDK)) <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end

@class WKNavigation;
@class WKNavigationResponse;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class WKNavigationAction;
@interface TapWebViewJavascriptBridge (SWIFT_EXTENSION(TapTapLeaderboardSDK)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef TAPTAPLEADERBOARDSDK_SWIFT_H
#define TAPTAPLEADERBOARDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TapTapLeaderboardSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class TapLeaderboardError;
@class NSString;
/// 业务错误转换器，对齐 Android BizErrorConverter.kt
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK31TapLeaderboardBizErrorConverter")
@interface TapLeaderboardBizErrorConverter : NSObject
/// 将业务错误转换为 TapLeaderboardError
/// 参照 Android 的 convert 方法实现
/// \param error 原始错误
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertWithError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// 将业务错误转换为 TapLeaderboardError，带默认消息
/// \param error 原始错误
///
/// \param defaultMessage 默认错误消息
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertWithError:(NSError * _Nonnull)error defaultMessage:(NSString * _Nonnull)defaultMessage SWIFT_WARN_UNUSED_RESULT;
/// 从网络响应数据转换错误
/// \param responseData 响应数据字典
///
/// \param statusCode HTTP状态码
///
/// \param errorMessage 错误消息
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertFromResponseWithResponseData:(NSDictionary<NSString *, id> * _Nullable)responseData statusCode:(NSInteger)statusCode errorMessage:(NSString * _Nullable)errorMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TapLeaderboardErrorCode : NSInteger;
/// 排行榜错误模型，对齐 Android LeaderboardError.kt
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK19TapLeaderboardError")
@interface TapLeaderboardError : NSObject
/// 错误码
@property (nonatomic, readonly) enum TapLeaderboardErrorCode errorCode;
/// 错误信息
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// 初始化错误对象
/// \param errorCode 错误码
///
/// \param message 错误信息
///
- (nonnull instancetype)initWithErrorCode:(enum TapLeaderboardErrorCode)errorCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// 获取客户端错误码
///
/// returns:
/// 客户端错误码
@property (nonatomic, readonly) NSInteger clientCode;
/// 获取服务器错误码
///
/// returns:
/// 服务器错误码
@property (nonatomic, readonly) NSInteger serverCode;
/// Error 协议实现
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
/// 便利构造方法：从错误码和消息创建
/// \param code 错误码
///
/// \param message 错误消息
///
///
/// returns:
/// 错误对象
+ (TapLeaderboardError * _Nonnull)createWithCode:(enum TapLeaderboardErrorCode)code message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 便利构造方法：创建未知错误
/// \param message 错误消息
///
///
/// returns:
/// 未知错误对象
+ (TapLeaderboardError * _Nonnull)unknownWithMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 排行榜错误码枚举，对齐 Android ErrorCode.kt
typedef SWIFT_ENUM(NSInteger, TapLeaderboardErrorCode, open) {
/// 排行榜周期已过期
  TapLeaderboardErrorCodeLeaderboardPeriodExpired = 500000,
/// 排行榜 ID 未找到
  TapLeaderboardErrorCodeLeaderboardIdNotFound = 500001,
/// 排行榜参数错误
  TapLeaderboardErrorCodeLeaderboardInvalidArguments = 500002,
/// 当前用户未授权获取此产品（服务）
  TapLeaderboardErrorCodeInsufficientScopes = 500101,
/// 用户未登录
  TapLeaderboardErrorCodeNotLogin = 500102,
/// 未知错误
  TapLeaderboardErrorCodeUnknown = 500199,
};

/// 排行榜筛选回调协议
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK28TapLeaderboardFilterCallback_")
@protocol TapLeaderboardFilterCallback <NSObject>
/// 排行榜选择改变回调
/// \param leaderboardId 选中的排行榜ID
///
/// \param leaderboardName 选中的排行榜名称
///
/// \param rank 用户排名
///
/// \param rankDisplay 排名显示文本
///
- (void)onLeaderboardChangeWithLeaderboardId:(NSString * _Nonnull)leaderboardId leaderboardName:(NSString * _Nonnull)leaderboardName rank:(NSInteger)rank rankDisplay:(NSString * _Nullable)rankDisplay;
@end

@class TapLeaderboardFilterItem;
/// 排行榜筛选数据模型
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK25TapLeaderboardFilterGroup")
@interface TapLeaderboardFilterGroup : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic) BOOL isSelected;
@property (nonatomic, copy) NSArray<TapLeaderboardFilterItem *> * _Nonnull leaderboards;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name isSelected:(BOOL)isSelected leaderboards:(NSArray<TapLeaderboardFilterItem *> * _Nonnull)leaderboards OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK24TapLeaderboardFilterItem")
@interface TapLeaderboardFilterItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSInteger rank;
@property (nonatomic, readonly, copy) NSString * _Nullable rankDisplay;
@property (nonatomic) BOOL isSelected;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name rank:(NSInteger)rank rankDisplay:(NSString * _Nullable)rankDisplay isSelected:(BOOL)isSelected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TapTapLeaderboardCollection;
@class TapTapLeaderboardScoreItem;
@protocol TapTapLeaderboardResponseCallback;
@class NSNumber;
@protocol TapTapLeaderboardCallback;
@protocol TapTapLeaderboardShareCallback;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK17TapTapLeaderboard")
@interface TapTapLeaderboard : NSObject
/// 打开用户名片
/// \param openId 开放平台ID
///
/// \param unionId 统一ID
///
+ (void)openUserProfileWithOpenId:(NSString * _Nonnull)openId unionId:(NSString * _Nonnull)unionId;
/// 打开排行榜
/// \param leaderboardId 排行榜ID
///
/// \param collection 排行榜集合类型
///
+ (void)openLeaderboardWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection;
/// 批量提交用户排行榜分数（一次最多提交5个分数）
/// \param scores 分数列表，最多5个
///
/// \param callback 响应回调
///
+ (void)submitScoresWithScores:(NSArray<TapTapLeaderboardScoreItem *> * _Nonnull)scores callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
/// 获取排行榜数据
/// \param leaderboardId 排行榜ID
///
/// \param collection 排行榜集合类型
///
/// \param nextPage 下一页标识，可选
///
/// \param periodToken 周期令牌，可选
///
/// \param callback 响应回调
///
+ (void)loadLeaderboardScoresWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection nextPage:(NSString * _Nullable)nextPage periodToken:(NSString * _Nullable)periodToken callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
/// 单查用户排行榜数据
/// \param leaderboardId 排行榜ID
///
/// \param collection 排行榜集合类型
///
/// \param periodToken 周期令牌，可选
///
/// \param callback 响应回调
///
+ (void)loadCurrentPlayerLeaderboardScoreWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection periodToken:(NSString * _Nullable)periodToken callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
+ (void)loadPlayerCenteredScoresObjCWithLeaderboardId:(NSString * _Nonnull)leaderboardId collection:(TapTapLeaderboardCollection * _Nonnull)collection periodToken:(NSString * _Nullable)periodToken maxCount:(NSNumber * _Nullable)maxCount callback:(id <TapTapLeaderboardResponseCallback> _Nonnull)callback;
/// 注册排行榜回调
/// \param callback 排行榜回调
///
+ (void)registerLeaderboardCallbackWithCallback:(id <TapTapLeaderboardCallback> _Nonnull)callback;
/// 取消注册排行榜回调
/// \param callback 排行榜回调
///
+ (void)unregisterLeaderboardCallbackWithCallback:(id <TapTapLeaderboardCallback> _Nonnull)callback;
/// 获取已注册的排行榜回调列表
///
/// returns:
/// 回调列表
+ (NSArray<id <TapTapLeaderboardCallback>> * _Nonnull)getRegisteredLeaderboardCallbacks SWIFT_WARN_UNUSED_RESULT;
/// 设置分享回调
/// \param callback 分享回调
///
+ (void)setShareCallbackWithCallback:(id <TapTapLeaderboardShareCallback> _Nonnull)callback;
/// 获取分享回调
///
/// returns:
/// 分享回调
+ (id <TapTapLeaderboardShareCallback> _Nullable)getShareCallback SWIFT_WARN_UNUSED_RESULT;
/// 显示排行榜筛选对话框
/// \param sdkUserId 用户 sdkUserId
///
/// \param currentLeaderboardId 当前选中的排行榜ID
///
/// \param callback 选择回调 (leaderboardId, leaderboardName, rank)
///
+ (void)showLeaderboardFilterWithSdkUserId:(NSString * _Nonnull)sdkUserId currentLeaderboardId:(NSString * _Nonnull)currentLeaderboardId callback:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull, NSInteger))callback;
/// 显示排行榜筛选对话框（扩展版本，包含rankDisplay）
/// \param sdkUserId 用户 sdkUserId
///
/// \param currentLeaderboardId 当前选中的排行榜ID
///
/// \param callback 选择回调 (leaderboardId, leaderboardName, rank, rankDisplay)
///
+ (void)showLeaderboardFilterWithRankDisplayWithSdkUserId:(NSString * _Nonnull)sdkUserId currentLeaderboardId:(NSString * _Nonnull)currentLeaderboardId callback:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull, NSInteger, NSString * _Nullable))callback;
/// 转换错误为排行榜错误（提供给外部使用）
/// \param error 原始错误
///
///
/// returns:
/// 转换后的排行榜错误
+ (TapLeaderboardError * _Nonnull)convertError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 排行榜通用回调
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK25TapTapLeaderboardCallback_")
@protocol TapTapLeaderboardCallback <NSObject>
/// 排行榜结果回调
/// \param code 结果码
///
/// \param message 消息
///
- (void)onLeaderboardResultWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK27TapTapLeaderboardCollection")
@interface TapTapLeaderboardCollection : NSObject
/// 好友榜
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TapTapLeaderboardCollection * _Nonnull friends;)
+ (TapTapLeaderboardCollection * _Nonnull)friends SWIFT_WARN_UNUSED_RESULT;
/// 总榜
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=public) TapTapLeaderboardCollection * _Nonnull public_;)
+ (TapTapLeaderboardCollection * _Nonnull)public SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
+ (TapTapLeaderboardCollection * _Nonnull)from:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TapTapLeaderboardInfo;
@class TapTapLeaderboardScore;
@class TapTapLeaderboardScoresResponse;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK29TapTapLeaderboardDataResponse")
@interface TapTapLeaderboardDataResponse : NSObject
/// 排行榜信息
@property (nonatomic, strong) TapTapLeaderboardInfo * _Nullable leaderboard;
/// 分数列表
@property (nonatomic, copy) NSArray<TapTapLeaderboardScore *> * _Nullable scores;
/// 下一页标识（根据is_truncated决定取值）
@property (nonatomic, copy) NSString * _Nonnull nextPage;
- (nonnull instancetype)initWithLeaderboard:(TapTapLeaderboardInfo * _Nullable)leaderboard scores:(NSArray<TapTapLeaderboardScore *> * _Nullable)scores nextPage:(NSString * _Nonnull)nextPage OBJC_DESIGNATED_INITIALIZER;
/// 从内部response转换为对外response
/// \param internalResponse 内部使用的TapTapLeaderboardScoresResponse
///
///
/// returns:
/// 对外的TapTapLeaderboardDataResponse
+ (TapTapLeaderboardDataResponse * _Nonnull)fromInternalResponse:(TapTapLeaderboardScoresResponse * _Nonnull)internalResponse SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Group;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK30TapTapLeaderboardGroupResponse")
@interface TapTapLeaderboardGroupResponse : NSObject
@property (nonatomic, copy) NSArray<Group *> * _Nonnull groups;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK22TapTapLeaderboardImage")
@interface TapTapLeaderboardImage : NSObject
@property (nonatomic, copy) NSString * _Nonnull color;
@property (nonatomic, copy) NSString * _Nullable gifUrl;
@property (nonatomic, copy) NSString * _Nonnull mediumUrl;
@property (nonatomic, copy) NSString * _Nonnull originalFormat;
@property (nonatomic, copy) NSString * _Nonnull originalUrl;
@property (nonatomic, copy) NSString * _Nonnull smallUrl;
@property (nonatomic, copy) NSString * _Nonnull url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TapTapLeaderboardPeriod;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK21TapTapLeaderboardInfo")
@interface TapTapLeaderboardInfo : NSObject
/// 可用的时间周期
@property (nonatomic, copy) NSArray<TapTapLeaderboardPeriod *> * _Nonnull availablePeriods;
/// 排行榜背景图片（结构体）
@property (nonatomic, strong) TapTapLeaderboardImage * _Nullable background;
/// 排行榜ID
@property (nonatomic, copy) NSString * _Nonnull id;
/// 排行榜名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 当前周期
@property (nonatomic, strong) TapTapLeaderboardPeriod * _Nullable period;
/// 排行榜分数
@property (nonatomic, strong) TapTapLeaderboardScore * _Nullable score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK23TapTapLeaderboardPeriod")
@interface TapTapLeaderboardPeriod : NSObject
/// 展示文本
@property (nonatomic, copy) NSString * _Nullable display;
/// 周期标识
@property (nonatomic, copy) NSString * _Nullable periodToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 排行榜响应回调协议（泛型）
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK33TapTapLeaderboardResponseCallback_")
@protocol TapTapLeaderboardResponseCallback <NSObject>
/// 成功回调
/// \param data 响应数据
///
- (void)onSuccessWithData:(id _Nonnull)data;
/// 失败回调
/// \param code 错误码
///
/// \param message 错误信息
///
- (void)onFailureWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
@end

@class TapTapLeaderboardUser;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK22TapTapLeaderboardScore")
@interface TapTapLeaderboardScore : NSObject
/// 排名展示文本
@property (nonatomic, copy) NSString * _Nullable rankDisplay;
/// 分数展示文本
@property (nonatomic, copy) NSString * _Nullable scoreDisplay;
/// 用户信息
@property (nonatomic, strong) TapTapLeaderboardUser * _Nullable user;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK26TapTapLeaderboardScoreItem")
@interface TapTapLeaderboardScoreItem : NSObject
/// 排行榜ID
@property (nonatomic, copy) NSString * _Nonnull leaderboardId;
/// 分数值
@property (nonatomic) int64_t score;
- (nonnull instancetype)initWithLeaderboardId:(NSString * _Nonnull)leaderboardId score:(int64_t)score OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK31TapTapLeaderboardScoresResponse")
@interface TapTapLeaderboardScoresResponse : NSObject
/// 排行榜信息
@property (nonatomic, strong) TapTapLeaderboardInfo * _Nullable leaderboard;
/// 分数列表（可为空）
@property (nonatomic, copy) NSArray<TapTapLeaderboardScore *> * _Nullable scores;
/// 下一页续传标识
@property (nonatomic, copy) NSString * _Nullable nextContinuationToken;
/// 是否截断（是否还有更多）
@property (nonatomic) BOOL isTruncated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 分享回调协议
SWIFT_PROTOCOL("_TtP20TapTapLeaderboardSDK30TapTapLeaderboardShareCallback_")
@protocol TapTapLeaderboardShareCallback <NSObject>
/// 分享成功
/// \param localPath 本地文件路径
///
- (void)onShareSuccessWithLocalPath:(NSString * _Nonnull)localPath;
/// 分享失败
/// \param error 错误信息
///
- (void)onShareFailedWithError:(NSError * _Nonnull)error;
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK21TapTapLeaderboardUser")
@interface TapTapLeaderboardUser : NSObject
/// 用户头像（结构体）
@property (nonatomic, strong) TapTapLeaderboardImage * _Nullable avatar;
/// 用户名称
@property (nonatomic, copy) NSString * _Nullable name;
/// 开放平台ID
@property (nonatomic, copy) NSString * _Nullable openId;
/// 统一ID
@property (nonatomic, copy) NSString * _Nullable unionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TapTapSubmitScoreResult;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK29TapTapSubmitScoreResponseItem")
@interface TapTapSubmitScoreResponseItem : NSObject
/// 排行榜ID
@property (nonatomic, copy) NSString * _Nonnull leaderboardId;
/// 用户开放平台ID
@property (nonatomic, copy) NSString * _Nonnull openId;
/// 周期Token
@property (nonatomic, copy) NSString * _Nonnull periodToken;
/// 分数结果
@property (nonatomic, strong) TapTapSubmitScoreResult * _Nullable scoreResult;
/// 用户统一ID
@property (nonatomic, copy) NSString * _Nonnull unionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK23TapTapSubmitScoreResult")
@interface TapTapSubmitScoreResult : NSObject
/// 是否为新的最佳成绩
@property (nonatomic) BOOL newBest;
/// 原始分数
@property (nonatomic) int64_t rawScore;
/// 分数展示文本
@property (nonatomic, copy) NSString * _Nonnull scoreDisplay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK26TapTapSubmitScoresResponse")
@interface TapTapSubmitScoresResponse : NSObject
/// 提交结果列表
@property (nonatomic, copy) NSArray<TapTapSubmitScoreResponseItem *> * _Nonnull items;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC20TapTapLeaderboardSDK23TapTapUserScoreResponse")
@interface TapTapUserScoreResponse : NSObject
/// 当前用户的分数信息
@property (nonatomic, strong) TapTapLeaderboardScore * _Nullable currentUserScore;
/// 排行榜信息
@property (nonatomic, strong) TapTapLeaderboardInfo * _Nullable leaderboard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
SWIFT_CLASS("_TtC20TapTapLeaderboardSDK26TapWebViewJavascriptBridge")
@interface TapWebViewJavascriptBridge : NSObject
- (WKWebView * _Nonnull)getWebView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKUserContentController;
@class WKScriptMessage;
@interface TapWebViewJavascriptBridge (SWIFT_EXTENSION(TapTapLeaderboardSDK)) <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end

@class WKNavigation;
@class WKNavigationResponse;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class WKNavigationAction;
@interface TapWebViewJavascriptBridge (SWIFT_EXTENSION(TapTapLeaderboardSDK)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

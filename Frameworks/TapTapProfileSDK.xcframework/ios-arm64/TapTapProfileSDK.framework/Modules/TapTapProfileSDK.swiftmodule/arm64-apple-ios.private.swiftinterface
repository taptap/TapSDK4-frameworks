// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TapTapProfileSDK
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreImage
import Foundation
import Kingfisher
import Swift
import TapTapBasicToolsSDK
import TapTapCoreSDK
import TapTapLoginSDK
import TapTapNetworkSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class TapTapProfile {
  public static func showUserCard(openId: Swift.String? = nil, unionId: Swift.String? = nil)
  @objc deinit
}
public protocol TapProfileRelationBridge {
  static func startChat(profileModel: TapTapProfileSDK.TapUserProfileModel)
  static func invite(profileModel: TapTapProfileSDK.TapUserProfileModel)
}
public protocol TapProfileLeaderboardBridge {
  static func openLeaderboard(sdkUserId: Swift.String, leaderboardId: Swift.String, leaderboardCallback: @escaping (_ leaderboardId: Swift.String, _ leaderboardName: Swift.String, _ rank: Swift.Int, _ rankDisplay: Swift.String) -> Swift.Void)
}
public struct TapUserProfileModel : Swift.Codable {
  public var friendship: TapTapProfileSDK.TapUserFriendShip?
  public var user: TapTapProfileSDK.TapUserModel
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TapUserFriendShip : Swift.Codable {
  public var followd: Swift.Bool?
  public var following: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TapUserModel : Swift.Codable {
  public var sdkUserId: Swift.String
  public var name: Swift.String
  public var avatar: Swift.String
  public var alias: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TapTapLoginSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import CommonCrypto
import Foundation
import Swift
import TapTapBasicToolsSDK
import TapTapCoreSDK
@_exported import TapTapLoginSDK
import TapTapNetworkSDK
import TapTapSDKBridgeCore
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TapLoginSwiftBridgeService : ObjectiveC.NSObject {
  @objc public static let shared: TapTapLoginSDK.TapLoginSwiftBridgeService
  @objc public func loginWithScopes(scopes: [Swift.String], completion: @escaping (Swift.String) -> Swift.Void)
  @objc public func logout(completion: ((Swift.String) -> Swift.Void)?)
  @objc public func getCurrentTapAccount(completion: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(TapLoginSwiftBridgeInitializer) public class TapLoginSwiftBridgeInitializer : ObjectiveC.NSObject {
  @objc public static func registerWithSwiftBridge()
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class UserInfo : ObjectiveC.NSObject {
  @objc public var name: Swift.String? {
    get
  }
  @objc public var avatar: Swift.String? {
    get
  }
  @objc public var openId: Swift.String? {
    get
  }
  @objc public var unionId: Swift.String? {
    get
  }
  @objc public var email: Swift.String? {
    get
  }
  @objc public var gender: Swift.String? {
    get
  }
  public var isCertified: Swift.Bool? {
    get
  }
  @objc public var emailVerified: Swift.Bool {
    get
  }
  @objc public init(json: [Swift.String : Any])
  @objc public func toJsonString() -> Swift.String
  @objc deinit
}
public typealias LoginHandler<T> = (_ result: T?, _ error: Foundation.NSError?, _ isCancel: Swift.Bool) -> Swift.Void
public enum Scope : Swift.String {
  case basicInfo
  case publicProfile
  case email
  case userFriends
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class TapTapLogin : ObjectiveC.NSObject {
  public static func login(with scopes: [TapTapLoginSDK.Scope], viewController: UIKit.UIViewController? = nil, handler: @escaping TapTapLoginSDK.LoginHandler<TapTapLoginSDK.TapTapAccount>)
  @objc public static func getCurrentTapAccount() -> TapTapLoginSDK.TapTapAccount?
  @objc public static func logout()
  @objc @discardableResult
  public static func open(url: Foundation.URL) -> Swift.Bool
  @objc deinit
}
extension TapTapLoginSDK.TapTapLogin {
  @objc public static func Login(scopes: [Swift.String], viewController: UIKit.UIViewController? = nil, handler: @escaping (Swift.Bool, Foundation.NSError?, TapTapLoginSDK.TapTapAccount?) -> Swift.Void)
  @objc public static func Login(scopes: [Swift.String], handler: @escaping (Swift.Bool, Foundation.NSError?, TapTapLoginSDK.TapTapAccount?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class FriendsResult : ObjectiveC.NSObject {
  @objc public var friends: [TapTapLoginSDK.FriendInfo]
  public var cursor: Swift.Int?
  @objc deinit
}
@objc @objcMembers public class FriendInfo : ObjectiveC.NSObject {
  @objc public var name: Swift.String? {
    get
  }
  @objc public var avatar: Swift.String? {
    get
  }
  @objc public var openId: Swift.String? {
    get
  }
  @objc public init(dictionary: [Swift.String : Any])
  @objc deinit
}
public struct FriendQuery {
  public var size: Swift.Int
  public var cursor: Swift.String?
  public init(size: Swift.Int = 20, cursor: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TapTapFirstPartyLogin : ObjectiveC.NSObject {
  @objc public static func login(with scopes: [Swift.String], viewController: UIKit.UIViewController? = nil, firstPartyLoginOptions: TapTapLoginSDK.TapFirstPartyLoginOptions?, handler: @escaping TapTapLoginSDK.LoginHandler<TapTapLoginSDK.TapTapAccount>)
  @objc public static func getLoginType() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TapFirstPartyLoginOptions : ObjectiveC.NSObject {
  @objc public var isPreApproved: Swift.Bool
  @objc public var phoneVerifyToken: Swift.String?
  @objc public var preferLoginType: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AccessToken : ObjectiveC.NSObject {
  @objc public var kid: Swift.String?
  @objc public var tokenType: Swift.String?
  @objc public var macKey: Swift.String?
  @objc public var macAlgorithm: Swift.String?
  @objc public var scope: Swift.String?
  @objc public var scopeArray: [Swift.String]?
  @objc public var expiresIn: Swift.Int
  @objc public func toJsonString() -> Swift.String
  @objc public static func build(with accessTokenJsonString: Swift.String) -> TapTapLoginSDK.AccessToken?
  @objc public static func build(kid: Swift.String, tokenType: Swift.String, macKey: Swift.String, macAlgorithm: Swift.String, scope: Swift.String? = nil) -> TapTapLoginSDK.AccessToken
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TapTipHUD : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public class func showTip(_ tip: Swift.String, timeInterval: Foundation.TimeInterval = 1)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TapTapAccount : ObjectiveC.NSObject {
  @objc public var accessToken: TapTapLoginSDK.AccessToken?
  @objc public var userInfo: TapTapLoginSDK.UserInfo?
  @objc public func toJsonString() -> Swift.String
  @objc deinit
}
extension TapTapLoginSDK.Scope : Swift.Equatable {}
extension TapTapLoginSDK.Scope : Swift.Hashable {}
extension TapTapLoginSDK.Scope : Swift.RawRepresentable {}
